{"meta":{"title":"Blogs","subtitle":null,"description":null,"author":"Machiro-Shina","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"python的bisect模块","slug":"python的bisect模块","date":"2018-08-16T09:40:01.000Z","updated":"2018-08-16T10:53:12.461Z","comments":true,"path":"2018/08/16/python的bisect模块/","link":"","permalink":"http://yoursite.com/2018/08/16/python的bisect模块/","excerpt":"","text":"在使用python进行二分法查询和在有序序列进行插入操作时可以使用bisect模块 主要函数bisect.insort(arr, el)会将元素el插入有序序列arr中，且不打乱原序列的顺序bisect.bisect(arr, el)会判断在保证序列顺序的情况下el元素应该插入的位置并返回，但不会执行插入操作。bisect.bisect_left(arr, el)返回的是应该插入位置的前一个位置 代码12345678910111213import bisectnums = [2, 3, 4, 1, 8, 3, 4]sorted_nums = sorted(nums)print(sorted_nums)bisect.insort(sorted_nums, 5)print(sorted_nums)def get_rank(scores, ranks='EDCBA', rank_scores=[60, 70, 80, 90]): for score in scores: print(ranks[bisect.bisect(rank_scores, score)])scores = [55, 22, 85, 90, 77, 63, 100]get_rank(scores) 执行结果[1, 2, 3, 3, 4, 4, 8][1, 2, 3, 3, 4, 4, 5, 8]EEBACDA","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"python的具名元组namedtuple","slug":"python的具名元组namedtuple","date":"2018-08-16T00:43:17.000Z","updated":"2018-08-16T00:57:32.532Z","comments":true,"path":"2018/08/16/python的具名元组namedtuple/","link":"","permalink":"http://yoursite.com/2018/08/16/python的具名元组namedtuple/","excerpt":"","text":"在用python进行OOP编程的时候，有时需要一个简单的类，这个类不需要方法，只有数量不多的属性，而建立一个类又不值得，这时可以用具名元组namedtuple来代替。这个类位于colletions模块中，需要先导入collections模块 语法创建一个具名元组: Name = collections.namedtuple(Name, [‘pro1’, ‘pro2’…])实例化: name = Name(pro1, pro2…) 代码1234import collectionsPerson = collections.namedtuple('Person', ['name', 'age'])p = Person('jack', 20)print(p) 输出结果Person(name=’jack’, age=20) 还可以用列表来传入参数，这时候需要用到namedtuple的类方法_make。用法:Person._make([…]) 代码1p2 = Person._make(['jack', 20]) 创建好的p对象的属性不能直接修改，但是可以通过namedtuple的实例方法_replace来修改。用法: p = p._replace(age=22) 代码12p = p._replace(age=22)print(p) 输出结果Person(name=’jack’, age=22)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"python的pickle模块","slug":"python的pickle模块","date":"2018-08-16T00:23:10.000Z","updated":"2018-08-16T00:36:00.195Z","comments":true,"path":"2018/08/16/python的pickle模块/","link":"","permalink":"http://yoursite.com/2018/08/16/python的pickle模块/","excerpt":"","text":"pickle模块用于以二进制的形式存储数据，加快了存储和读取的速度，节约内存。 主要函数pickle.dumps函数: 该函数接受一个python的数据对象，将其转换成二进制数据流然后返回pickle.loads函数: 该函数接受一个二进制数据流对象，将其转换成python数据对象然后返回pickle.dump函数: 该函数接受两个参数，第一个是python的数据对象，第二个是文件对象，也就是通过open方法打开的文件，要注意文件的打开格式是’wb’，b代表二进制，可以使用with语句，将python数据对象转换成二进制存入文件中。pickle.load函数: 该函数接受一个以’rb’格式打开的文件对象，读取文件中的二进制数据并将其转换成python数据格式返回 实例代码1234567891011121314import pickleprint(pickle.dumps('abcde'))r1 = pickle.dumps('abcde')print(pickle.loads(r1))try: with open('pickle', 'wb') as p: pickle.dump('abcde', p)except IOError as e: print(e)try: with open('pickle', 'rb') as p: print(pickle.load(p))except IOError as e: print(e) 输出结果b’\\x80\\x03X\\x05\\x00\\x00\\x00abcdeq\\x00.’abcdeabcde","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-08-15T08:11:50.536Z","updated":"2018-08-15T08:11:50.536Z","comments":true,"path":"2018/08/15/hello-world/","link":"","permalink":"http://yoursite.com/2018/08/15/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}